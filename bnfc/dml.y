/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "Absyn.h"
#define initialize_lexer dml_initialize_lexer
extern int yyparse(void);
extern int yylex(void);
int yy_mylinenumber;
extern int initialize_lexer(FILE * inp);
void yyerror(const char *str)
{
  extern char *dmltext;
  fprintf(stderr,"error: line %d: %s at %s\n",
    yy_mylinenumber + 1, str, dmltext);
}

Program YY_RESULT_Program_ = 0;
Program pProgram(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}

ListStm YY_RESULT_ListStm_ = 0;
ListStm pListStm(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStm_;
  }
}

Stm YY_RESULT_Stm_ = 0;
Stm pStm(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Stm_;
  }
}

Row YY_RESULT_Row_ = 0;
Row pRow(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Row_;
  }
}

ListExp YY_RESULT_ListExp_ = 0;
ListExp pListExp(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExp_;
  }
}

ListRow YY_RESULT_ListRow_ = 0;
ListRow pListRow(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListRow_;
  }
}

Exp YY_RESULT_Exp_ = 0;
Exp pExp(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Exp_;
  }
}


ListStm reverseListStm(ListStm l)
{
  ListStm prev = 0;
  ListStm tmp = 0;
  while (l)
  {
    tmp = l->liststm_;
    l->liststm_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListExp reverseListExp(ListExp l)
{
  ListExp prev = 0;
  ListExp tmp = 0;
  while (l)
  {
    tmp = l->listexp_;
    l->listexp_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListRow reverseListRow(ListRow l)
{
  ListRow prev = 0;
  ListRow tmp = 0;
  while (l)
  {
    tmp = l->listrow_;
    l->listrow_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}

%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  Program program_;
  ListStm liststm_;
  Stm stm_;
  Row row_;
  ListExp listexp_;
  ListRow listrow_;
  Exp exp_;

}

%token _ERROR_
%token _SYMB_0    /*   ;   */
%token _SYMB_1    /*   =>   */
%token _SYMB_2    /*   ::=   */
%token _SYMB_3    /*   [   */
%token _SYMB_4    /*   ]   */
%token _SYMB_5    /*   +   */
%token _SYMB_6    /*   -   */
%token _SYMB_7    /*   *   */
%token _SYMB_8    /*   /   */
%token _SYMB_9    /*   <->   */
%token _SYMB_10    /*   ->   */
%token _SYMB_11    /*   =   */
%token _SYMB_12    /*   (   */
%token _SYMB_13    /*   )   */
%token _SYMB_14    /*   close   */
%token _SYMB_15    /*   create   */
%token _SYMB_16    /*   double   */
%token _SYMB_17    /*   e   */
%token _SYMB_18    /*   for   */
%token _SYMB_19    /*   int   */
%token _SYMB_20    /*   out   */
%token _SYMB_21    /*   pause   */
%token _SYMB_22    /*   pi   */
%token _SYMB_23    /*   ref   */
%token _SYMB_24    /*   rref   */
%token _SYMB_25    /*   tex   */
%token _SYMB_26    /*   titled   */
%token<string_> _SYMB_27    /*   SInteger   */

%type <program_> Program
%type <liststm_> ListStm
%type <stm_> Stm
%type <row_> Row
%type <listexp_> ListExp
%type <listrow_> ListRow
%type <row_> Row1
%type <row_> Row2
%type <exp_> Exp
%type <exp_> Exp1
%type <exp_> Exp2

%token<string_> _STRING_
%token<double_> _DOUBLE_
%token<string_> _IDENT_

%start Program
%%
Program : ListStm { $$ = make_Prog(reverseListStm($1)); YY_RESULT_Program_= $$; } 
;
ListStm : /* empty */ { $$ = 0; YY_RESULT_ListStm_= $$; } 
  | ListStm Stm _SYMB_0 { $$ = make_ListStm($2, $1); YY_RESULT_ListStm_= $$; }
;
Stm : _SYMB_15 _STRING_ _SYMB_26 _STRING_ _SYMB_18 _STRING_ { $$ = make_InitTex($2, $4, $6); YY_RESULT_Stm_= $$; } 
  | _IDENT_ _SYMB_1 _SYMB_25 { $$ = make_OutTex($1); YY_RESULT_Stm_= $$; }
  | _STRING_ _SYMB_1 _SYMB_25 { $$ = make_SOutTex($1); YY_RESULT_Stm_= $$; }
  | _SYMB_14 _SYMB_25 { $$ = make_CloseTex(); YY_RESULT_Stm_= $$; }
  | _SYMB_20 _SYMB_1 _SYMB_25 { $$ = make_Redirect(); YY_RESULT_Stm_= $$; }
  | _IDENT_ _SYMB_1 _SYMB_20 { $$ = make_Print($1); YY_RESULT_Stm_= $$; }
  | _STRING_ _SYMB_1 _SYMB_20 { $$ = make_SPrint($1); YY_RESULT_Stm_= $$; }
  | Row _SYMB_1 _SYMB_20 { $$ = make_RPrint($1); YY_RESULT_Stm_= $$; }
  | _IDENT_ _SYMB_2 ListRow { $$ = make_PMat($1, reverseListRow($3)); YY_RESULT_Stm_= $$; }
  | Row _SYMB_9 Row { $$ = make_RSwp($1, $3); YY_RESULT_Stm_= $$; }
  | Row _SYMB_10 Row { $$ = make_RSet($1, $3); YY_RESULT_Stm_= $$; }
  | Row _SYMB_11 Row { $$ = make_RAss($1, $3); YY_RESULT_Stm_= $$; }
  | _IDENT_ _SYMB_1 _SYMB_24 { $$ = make_Rref($1); YY_RESULT_Stm_= $$; }
  | _IDENT_ _SYMB_1 _SYMB_23 { $$ = make_Ref($1); YY_RESULT_Stm_= $$; }
  | _IDENT_ _SYMB_11 Exp { $$ = make_AVar($1, $3); YY_RESULT_Stm_= $$; }
  | _IDENT_ _SYMB_1 _SYMB_16 { $$ = make_CDoub($1); YY_RESULT_Stm_= $$; }
  | _IDENT_ _SYMB_1 _SYMB_19 { $$ = make_CInt($1); YY_RESULT_Stm_= $$; }
  | _SYMB_21 { $$ = make_Pause(); YY_RESULT_Stm_= $$; }
;
Row : _SYMB_3 ListExp _SYMB_4 { $$ = make_PRow(reverseListExp($2)); YY_RESULT_Row_= $$; } 
  | Row _SYMB_5 Row1 { $$ = make_RAdd($1, $3); YY_RESULT_Row_= $$; }
  | Row _SYMB_6 Row1 { $$ = make_RSub($1, $3); YY_RESULT_Row_= $$; }
  | Row1 { $$ = $1; YY_RESULT_Row_= $$; }
;
ListExp : /* empty */ { $$ = 0; YY_RESULT_ListExp_= $$; } 
  | ListExp Exp { $$ = make_ListExp($2, $1); YY_RESULT_ListExp_= $$; }
;
ListRow : /* empty */ { $$ = 0; YY_RESULT_ListRow_= $$; } 
  | ListRow Row { $$ = make_ListRow($2, $1); YY_RESULT_ListRow_= $$; }
;
Row1 : Exp2 _SYMB_7 Row2 { $$ = make_RMul($1, $3); YY_RESULT_Row_= $$; } 
  | Row2 _SYMB_8 Exp2 { $$ = make_RDiv($1, $3); YY_RESULT_Row_= $$; }
  | Row1 _SYMB_7 Exp2 { $$ = make_RMul2($1, $3); YY_RESULT_Row_= $$; }
  | Row2 { $$ = $1; YY_RESULT_Row_= $$; }
;
Row2 : _IDENT_ _SYMB_3 Exp _SYMB_4 { $$ = make_SMat($1, $3); YY_RESULT_Row_= $$; } 
  | _SYMB_12 Row _SYMB_13 { $$ = $2; YY_RESULT_Row_= $$; }
;
Exp : Exp _SYMB_5 Exp1 { $$ = make_EAdd($1, $3); YY_RESULT_Exp_= $$; } 
  | Exp _SYMB_6 Exp1 { $$ = make_ESub($1, $3); YY_RESULT_Exp_= $$; }
  | Exp1 { $$ = $1; YY_RESULT_Exp_= $$; }
;
Exp1 : Exp1 _SYMB_7 Exp2 { $$ = make_EMul($1, $3); YY_RESULT_Exp_= $$; } 
  | Exp1 _SYMB_8 Exp2 { $$ = make_EDiv($1, $3); YY_RESULT_Exp_= $$; }
  | Exp2 { $$ = $1; YY_RESULT_Exp_= $$; }
;
Exp2 : _SYMB_27 { $$ = make_ESInt($1); YY_RESULT_Exp_= $$; } 
  | _DOUBLE_ { $$ = make_EDob($1); YY_RESULT_Exp_= $$; }
  | _IDENT_ { $$ = make_EIden($1); YY_RESULT_Exp_= $$; }
  | _SYMB_17 { $$ = make_ConstE(); YY_RESULT_Exp_= $$; }
  | _SYMB_22 { $$ = make_ConstPI(); YY_RESULT_Exp_= $$; }
  | _SYMB_12 Exp _SYMB_13 { $$ = $2; YY_RESULT_Exp_= $$; }
;


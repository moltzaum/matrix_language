#ifndef ABSYN_HEADER
#define ABSYN_HEADER

/* C++ Abstract Syntax Interface generated by the BNF Converter.*/

/********************   TypeDef Section    ********************/
typedef int Integer;
typedef char Char;
typedef double Double;
typedef char* String;
typedef char* Ident;
typedef char* SInteger;


/********************   Forward Declarations    ********************/

struct ListStm_;
typedef struct ListStm_ *ListStm;
struct ListExp_;
typedef struct ListExp_ *ListExp;
struct ListRow_;
typedef struct ListRow_ *ListRow;
struct Program_;
typedef struct Program_ *Program;
struct Stm_;
typedef struct Stm_ *Stm;
struct Row_;
typedef struct Row_ *Row;
struct Exp_;
typedef struct Exp_ *Exp;


/********************   Abstract Syntax Classes    ********************/

struct Program_
{
  enum { is_Prog } kind;
  union
  {
    struct { ListStm liststm_; } prog_;
  } u;
};

Program make_Prog(ListStm p0);

struct ListStm_
{
  Stm stm_;
  ListStm liststm_;
};

ListStm make_ListStm(Stm p1, ListStm p2);
struct Stm_
{
  enum { is_InitTex, is_OutTex, is_SOutTex, is_CloseTex, is_Redirect, is_Print, is_SPrint, is_RPrint, is_PMat, is_RSwp, is_RSet, is_RAss, is_Rref, is_Ref, is_AVar, is_CDoub, is_CInt, is_Pause } kind;
  union
  {
    struct { String string_1, string_2, string_3; } inittex_;
    struct { Ident ident_; } outtex_;
    struct { String string_; } souttex_;
    struct { Ident ident_; } print_;
    struct { String string_; } sprint_;
    struct { Row row_; } rprint_;
    struct { Ident ident_; ListRow listrow_; } pmat_;
    struct { Row row_1, row_2; } rswp_;
    struct { Row row_1, row_2; } rset_;
    struct { Row row_1, row_2; } rass_;
    struct { Ident ident_; } rref_;
    struct { Ident ident_; } ref_;
    struct { Exp exp_; Ident ident_; } avar_;
    struct { Ident ident_; } cdoub_;
    struct { Ident ident_; } cint_;
  } u;
};

Stm make_InitTex(String p0, String p1, String p2);
Stm make_OutTex(Ident p0);
Stm make_SOutTex(String p0);
Stm make_CloseTex(void);
Stm make_Redirect(void);
Stm make_Print(Ident p0);
Stm make_SPrint(String p0);
Stm make_RPrint(Row p0);
Stm make_PMat(Ident p0, ListRow p1);
Stm make_RSwp(Row p0, Row p1);
Stm make_RSet(Row p0, Row p1);
Stm make_RAss(Row p0, Row p1);
Stm make_Rref(Ident p0);
Stm make_Ref(Ident p0);
Stm make_AVar(Ident p0, Exp p1);
Stm make_CDoub(Ident p0);
Stm make_CInt(Ident p0);
Stm make_Pause(void);

struct Row_
{
  enum { is_PRow, is_RAdd, is_RSub, is_RMul, is_RDiv, is_RMul2, is_SMat } kind;
  union
  {
    struct { ListExp listexp_; } prow_;
    struct { Row row_1, row_2; } radd_;
    struct { Row row_1, row_2; } rsub_;
    struct { Exp exp_; Row row_; } rmul_;
    struct { Exp exp_; Row row_; } rdiv_;
    struct { Exp exp_; Row row_; } rmul2_;
    struct { Exp exp_; Ident ident_; } smat_;
  } u;
};

Row make_PRow(ListExp p0);
Row make_RAdd(Row p0, Row p1);
Row make_RSub(Row p0, Row p1);
Row make_RMul(Exp p0, Row p1);
Row make_RDiv(Row p0, Exp p1);
Row make_RMul2(Row p0, Exp p1);
Row make_SMat(Ident p0, Exp p1);

struct ListExp_
{
  Exp exp_;
  ListExp listexp_;
};

ListExp make_ListExp(Exp p1, ListExp p2);
struct ListRow_
{
  Row row_;
  ListRow listrow_;
};

ListRow make_ListRow(Row p1, ListRow p2);
struct Exp_
{
  enum { is_EAdd, is_ESub, is_EMul, is_EDiv, is_ESInt, is_EDob, is_EIden, is_ConstE, is_ConstPI } kind;
  union
  {
    struct { Exp exp_1, exp_2; } eadd_;
    struct { Exp exp_1, exp_2; } esub_;
    struct { Exp exp_1, exp_2; } emul_;
    struct { Exp exp_1, exp_2; } ediv_;
    struct { SInteger sinteger_; } esint_;
    struct { Double double_; } edob_;
    struct { Ident ident_; } eiden_;
  } u;
};

Exp make_EAdd(Exp p0, Exp p1);
Exp make_ESub(Exp p0, Exp p1);
Exp make_EMul(Exp p0, Exp p1);
Exp make_EDiv(Exp p0, Exp p1);
Exp make_ESInt(SInteger p0);
Exp make_EDob(Double p0);
Exp make_EIden(Ident p0);
Exp make_ConstE(void);
Exp make_ConstPI(void);



#endif
